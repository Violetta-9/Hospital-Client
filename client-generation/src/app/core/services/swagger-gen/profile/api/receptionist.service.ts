/**
 * Profile.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ReceptionistAllDTO } from '../model/receptionistAllDTO';
import { ReceptionistOneDTO } from '../model/receptionistOneDTO';
import { Response } from '../model/response';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReceptionistService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Assign receptionist role
     * 
     * @param firstName 
     * @param lastName 
     * @param middleName 
     * @param email 
     * @param phoneNumber 
     * @param birthDate 
     * @param officeId 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assignReceptionistRoleForm(firstName?: string, lastName?: string, middleName?: string, email?: string, phoneNumber?: string, birthDate?: Date, officeId?: number, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public assignReceptionistRoleForm(firstName?: string, lastName?: string, middleName?: string, email?: string, phoneNumber?: string, birthDate?: Date, officeId?: number, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public assignReceptionistRoleForm(firstName?: string, lastName?: string, middleName?: string, email?: string, phoneNumber?: string, birthDate?: Date, officeId?: number, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public assignReceptionistRoleForm(firstName?: string, lastName?: string, middleName?: string, email?: string, phoneNumber?: string, birthDate?: Date, officeId?: number, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (firstName !== undefined) {
            formParams = formParams.append('FirstName', <any>firstName) as any || formParams;
        }
        if (lastName !== undefined) {
            formParams = formParams.append('LastName', <any>lastName) as any || formParams;
        }
        if (middleName !== undefined) {
            formParams = formParams.append('MiddleName', <any>middleName) as any || formParams;
        }
        if (email !== undefined) {
            formParams = formParams.append('Email', <any>email) as any || formParams;
        }
        if (phoneNumber !== undefined) {
            formParams = formParams.append('PhoneNumber', <any>phoneNumber) as any || formParams;
        }
        if (birthDate !== undefined) {
            formParams = formParams.append('BirthDate', <any>birthDate) as any || formParams;
        }
        if (officeId !== undefined) {
            formParams = formParams.append('OfficeId', <any>officeId) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<Response>('post',`${this.basePath}/api/Receptionist/roles`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Receptionist
     * 
     * @param accountId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteReceptionistForm(accountId?: string, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public deleteReceptionistForm(accountId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public deleteReceptionistForm(accountId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public deleteReceptionistForm(accountId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (accountId !== undefined) {
            formParams = formParams.append('accountId', <any>accountId) as any || formParams;
        }

        return this.httpClient.request<Response>('delete',`${this.basePath}/api/Receptionist`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Receptionists
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllReceptionists(observe?: 'body', reportProgress?: boolean): Observable<Array<ReceptionistAllDTO>>;
    public getAllReceptionists(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ReceptionistAllDTO>>>;
    public getAllReceptionists(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ReceptionistAllDTO>>>;
    public getAllReceptionists(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ReceptionistAllDTO>>('get',`${this.basePath}/api/Receptionist/all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Receptionist By Id
     * 
     * @param receptionistId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReceptionistById(receptionistId: number, observe?: 'body', reportProgress?: boolean): Observable<ReceptionistOneDTO>;
    public getReceptionistById(receptionistId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReceptionistOneDTO>>;
    public getReceptionistById(receptionistId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReceptionistOneDTO>>;
    public getReceptionistById(receptionistId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (receptionistId === null || receptionistId === undefined) {
            throw new Error('Required parameter receptionistId was null or undefined when calling getReceptionistById.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ReceptionistOneDTO>('get',`${this.basePath}/api/Receptionist/${encodeURIComponent(String(receptionistId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Receptionist Id By AccountId
     * 
     * @param accountId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReceptionistIdByAccountId(accountId?: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public getReceptionistIdByAccountId(accountId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public getReceptionistIdByAccountId(accountId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public getReceptionistIdByAccountId(accountId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (accountId !== undefined && accountId !== null) {
            queryParameters = queryParameters.set('accountId', <any>accountId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<number>('get',`${this.basePath}/api/Receptionist`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Office
     * 
     * @param accountId 
     * @param officeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOfficeForm(accountId?: string, officeId?: number, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public updateOfficeForm(accountId?: string, officeId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public updateOfficeForm(accountId?: string, officeId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public updateOfficeForm(accountId?: string, officeId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (accountId !== undefined) {
            formParams = formParams.append('AccountId', <any>accountId) as any || formParams;
        }
        if (officeId !== undefined) {
            formParams = formParams.append('OfficeId', <any>officeId) as any || formParams;
        }

        return this.httpClient.request<Response>('patch',`${this.basePath}/api/Receptionist`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
