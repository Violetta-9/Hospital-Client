/**
 * Profile.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { DoctorAllDTO } from '../model/doctorAllDTO';
import { DoctorOneDTO } from '../model/doctorOneDTO';
import { Response } from '../model/response';
import { UpdateDoctorDTO } from '../model/updateDoctorDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DoctorService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Assign the Role To Doctor
     * 
     * @param firstName 
     * @param lastName 
     * @param middleName 
     * @param email 
     * @param phoneNumber 
     * @param birthDate 
     * @param specializationId 
     * @param officeId 
     * @param statusId 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assignRoleToDoctorForm(firstName?: string, lastName?: string, middleName?: string, email?: string, phoneNumber?: string, birthDate?: Date, specializationId?: number, officeId?: number, statusId?: number, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public assignRoleToDoctorForm(firstName?: string, lastName?: string, middleName?: string, email?: string, phoneNumber?: string, birthDate?: Date, specializationId?: number, officeId?: number, statusId?: number, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public assignRoleToDoctorForm(firstName?: string, lastName?: string, middleName?: string, email?: string, phoneNumber?: string, birthDate?: Date, specializationId?: number, officeId?: number, statusId?: number, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public assignRoleToDoctorForm(firstName?: string, lastName?: string, middleName?: string, email?: string, phoneNumber?: string, birthDate?: Date, specializationId?: number, officeId?: number, statusId?: number, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {











        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (firstName !== undefined) {
            formParams = formParams.append('FirstName', <any>firstName) as any || formParams;
        }
        if (lastName !== undefined) {
            formParams = formParams.append('LastName', <any>lastName) as any || formParams;
        }
        if (middleName !== undefined) {
            formParams = formParams.append('MiddleName', <any>middleName) as any || formParams;
        }
        if (email !== undefined) {
            formParams = formParams.append('Email', <any>email) as any || formParams;
        }
        if (phoneNumber !== undefined) {
            formParams = formParams.append('PhoneNumber', <any>phoneNumber) as any || formParams;
        }
        if (birthDate !== undefined) {
            formParams = formParams.append('BirthDate', <any>birthDate) as any || formParams;
        }
        if (specializationId !== undefined) {
            formParams = formParams.append('SpecializationId', <any>specializationId) as any || formParams;
        }
        if (officeId !== undefined) {
            formParams = formParams.append('OfficeId', <any>officeId) as any || formParams;
        }
        if (statusId !== undefined) {
            formParams = formParams.append('StatusId', <any>statusId) as any || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<Response>('post',`${this.basePath}/api/Doctor/roles`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Doctor
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDoctor(body?: string, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public deleteDoctor(body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public deleteDoctor(body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public deleteDoctor(body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Response>('delete',`${this.basePath}/api/Doctor`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Doctor By FullName
     * 
     * @param firstName 
     * @param lastName 
     * @param middleName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findDoctorByFullName(firstName?: string, lastName?: string, middleName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DoctorAllDTO>>;
    public findDoctorByFullName(firstName?: string, lastName?: string, middleName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DoctorAllDTO>>>;
    public findDoctorByFullName(firstName?: string, lastName?: string, middleName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DoctorAllDTO>>>;
    public findDoctorByFullName(firstName?: string, lastName?: string, middleName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (firstName !== undefined && firstName !== null) {
            queryParameters = queryParameters.set('FirstName', <any>firstName);
        }
        if (lastName !== undefined && lastName !== null) {
            queryParameters = queryParameters.set('LastName', <any>lastName);
        }
        if (middleName !== undefined && middleName !== null) {
            queryParameters = queryParameters.set('MiddleName', <any>middleName);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DoctorAllDTO>>('get',`${this.basePath}/api/Doctor/fullname`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get All Doctors
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDoctors(observe?: 'body', reportProgress?: boolean): Observable<Array<DoctorAllDTO>>;
    public getAllDoctors(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DoctorAllDTO>>>;
    public getAllDoctors(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DoctorAllDTO>>>;
    public getAllDoctors(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DoctorAllDTO>>('get',`${this.basePath}/api/Doctor/all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Doctor By Id
     * 
     * @param doctorId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDoctorById(doctorId: number, observe?: 'body', reportProgress?: boolean): Observable<DoctorOneDTO>;
    public getDoctorById(doctorId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DoctorOneDTO>>;
    public getDoctorById(doctorId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DoctorOneDTO>>;
    public getDoctorById(doctorId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (doctorId === null || doctorId === undefined) {
            throw new Error('Required parameter doctorId was null or undefined when calling getDoctorById.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DoctorOneDTO>('get',`${this.basePath}/api/Doctor/${encodeURIComponent(String(doctorId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Doctor By Id
     * 
     * @param officeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDoctorsByOfficeId(officeId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<DoctorAllDTO>>;
    public getDoctorsByOfficeId(officeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DoctorAllDTO>>>;
    public getDoctorsByOfficeId(officeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DoctorAllDTO>>>;
    public getDoctorsByOfficeId(officeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (officeId === null || officeId === undefined) {
            throw new Error('Required parameter officeId was null or undefined when calling getDoctorsByOfficeId.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DoctorAllDTO>>('get',`${this.basePath}/api/Doctor/offices/${encodeURIComponent(String(officeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Doctors By Specialization Id
     * 
     * @param id 
     * @param specializationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDoctorsBySpecializationId(id: string, specializationId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<DoctorAllDTO>>;
    public getDoctorsBySpecializationId(id: string, specializationId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DoctorAllDTO>>>;
    public getDoctorsBySpecializationId(id: string, specializationId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DoctorAllDTO>>>;
    public getDoctorsBySpecializationId(id: string, specializationId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDoctorsBySpecializationId.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (specializationId !== undefined && specializationId !== null) {
            queryParameters = queryParameters.set('specializationId', <any>specializationId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DoctorAllDTO>>('get',`${this.basePath}/api/Doctor/specialization/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Doctor Profile
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDoctorProfile(body?: UpdateDoctorDTO, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public updateDoctorProfile(body?: UpdateDoctorDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public updateDoctorProfile(body?: UpdateDoctorDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public updateDoctorProfile(body?: UpdateDoctorDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Response>('patch',`${this.basePath}/api/Doctor/update`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Status
     * 
     * @param status 
     * @param accountId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStatusForm(status?: number, accountId?: string, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public updateStatusForm(status?: number, accountId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public updateStatusForm(status?: number, accountId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public updateStatusForm(status?: number, accountId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (status !== undefined) {
            formParams = formParams.append('status', <any>status) as any || formParams;
        }
        if (accountId !== undefined) {
            formParams = formParams.append('accountId', <any>accountId) as any || formParams;
        }

        return this.httpClient.request<Response>('patch',`${this.basePath}/api/Doctor/status`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
