/**
 * Appoitment.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AppointmentHistoryDTO } from '../model/appointmentHistoryDTO';
import { AppointmentScheduleForDoctorDTO } from '../model/appointmentScheduleForDoctorDTO';
import { AppointmentScheduleForReceptionistDTO } from '../model/appointmentScheduleForReceptionistDTO';
import { BusyTimeSlotsDto } from '../model/busyTimeSlotsDto';
import { CreateAppointmentResultDto } from '../model/createAppointmentResultDto';
import { Response } from '../model/response';

import { BASE_PATH }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AppointmentService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Approve Appointment
     *
     * @param appointmentId
     * @param isApprove
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approveAppointmentForm(appointmentId?: number, isApprove?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public approveAppointmentForm(appointmentId?: number, isApprove?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public approveAppointmentForm(appointmentId?: number, isApprove?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public approveAppointmentForm(appointmentId?: number, isApprove?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (appointmentId !== undefined) {
            formParams = formParams.append('appointmentId', <any>appointmentId) as any || formParams;
        }
        if (isApprove !== undefined) {
            formParams = formParams.append('isApprove', <any>isApprove) as any || formParams;
        }

        return this.httpClient.request<Response>('patch',`${this.basePath}/api/Appointment/approve`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cancel Appointment
     *
     * @param appointmentId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelAppointmentForm(appointmentId?: number, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public cancelAppointmentForm(appointmentId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public cancelAppointmentForm(appointmentId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public cancelAppointmentForm(appointmentId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (appointmentId !== undefined) {
            formParams = formParams.append('appointmentId', <any>appointmentId) as any || formParams;
        }

        return this.httpClient.request<Response>('delete',`${this.basePath}/api/Appointment`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Appointment
     *
     * @param doctorId
     * @param patientId
     * @param serviceId
     * @param specializationId
     * @param officeId
     * @param dateTime
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAppointmentForm(doctorId?: number, patientId?: number, serviceId?: number, specializationId?: number, officeId?: number, dateTime?: Date, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public createAppointmentForm(doctorId?: number, patientId?: number, serviceId?: number, specializationId?: number, officeId?: number, dateTime?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public createAppointmentForm(doctorId?: number, patientId?: number, serviceId?: number, specializationId?: number, officeId?: number, dateTime?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public createAppointmentForm(doctorId?: number, patientId?: number, serviceId?: number, specializationId?: number, officeId?: number, dateTime?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (doctorId !== undefined) {
            formParams = formParams.append('DoctorId', <any>doctorId) as any || formParams;
        }
        if (patientId !== undefined) {
            formParams = formParams.append('PatientId', <any>patientId) as any || formParams;
        }
        if (serviceId !== undefined) {
            formParams = formParams.append('ServiceId', <any>serviceId) as any || formParams;
        }
        if (specializationId !== undefined) {
            formParams = formParams.append('SpecializationId', <any>specializationId) as any || formParams;
        }
        if (officeId !== undefined) {
            formParams = formParams.append('OfficeId', <any>officeId) as any || formParams;
        }
        if (dateTime !== undefined) {
            formParams = formParams.append('DateTime', <any>dateTime.toLocaleString()) as any || formParams;
        }

        return this.httpClient.request<number>('post',`${this.basePath}/api/Appointment`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Appointment Result
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAppointmentResult(body?: CreateAppointmentResultDto, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public createAppointmentResult(body?: CreateAppointmentResultDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public createAppointmentResult(body?: CreateAppointmentResultDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public createAppointmentResult(body?: CreateAppointmentResultDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Response>('post',`${this.basePath}/api/Appointment/result`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Appointment List For Doctor
     *
     * @param doctorId
     * @param dataTime
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAppointmentListForDoctor(doctorId?: number, dataTime?: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<AppointmentScheduleForDoctorDTO>>;
    public getAppointmentListForDoctor(doctorId?: number, dataTime?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AppointmentScheduleForDoctorDTO>>>;
    public getAppointmentListForDoctor(doctorId?: number, dataTime?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AppointmentScheduleForDoctorDTO>>>;
    public getAppointmentListForDoctor(doctorId?: number, dataTime?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (doctorId !== undefined && doctorId !== null) {
            queryParameters = queryParameters.set('doctorId', <any>doctorId);
        }
        if (dataTime !== undefined && dataTime !== null) {
            queryParameters = queryParameters.set('dataTime', <any>dataTime.toLocaleString());
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }



        return this.httpClient.request<Array<AppointmentScheduleForDoctorDTO>>('get',`${this.basePath}/api/Appointment/doctor`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Appointment List For Patient
     *
     * @param patientId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAppointmentListForPatient(patientId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<AppointmentHistoryDTO>>;
    public getAppointmentListForPatient(patientId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AppointmentHistoryDTO>>>;
    public getAppointmentListForPatient(patientId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AppointmentHistoryDTO>>>;
    public getAppointmentListForPatient(patientId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (patientId !== undefined && patientId !== null) {
            queryParameters = queryParameters.set('patientId', <any>patientId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AppointmentHistoryDTO>>('get',`${this.basePath}/api/Appointment/patient`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Appointment List For Receptionist
     *
     * @param officeId
     * @param dataTime
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAppointmentListForReceptionist(officeId?: number, dataTime?: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<AppointmentScheduleForReceptionistDTO>>;
    public getAppointmentListForReceptionist(officeId?: number, dataTime?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AppointmentScheduleForReceptionistDTO>>>;
    public getAppointmentListForReceptionist(officeId?: number, dataTime?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AppointmentScheduleForReceptionistDTO>>>;
    public getAppointmentListForReceptionist(officeId?: number, dataTime?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (officeId !== undefined && officeId !== null) {
            queryParameters = queryParameters.set('officeId', <any>officeId);
        }
        if (dataTime !== undefined && dataTime !== null) {
            queryParameters = queryParameters.set('dataTime', <any>dataTime.toLocaleString());
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AppointmentScheduleForReceptionistDTO>>('get',`${this.basePath}/api/Appointment/receptionist`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get busy time slots
     *
     * @param doctorId
     * @param data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBusyTimeSlot(doctorId?: number, data?: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<BusyTimeSlotsDto>>;
    public getBusyTimeSlot(doctorId?: number, data?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BusyTimeSlotsDto>>>;
    public getBusyTimeSlot(doctorId?: number, data?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BusyTimeSlotsDto>>>;
    public getBusyTimeSlot(doctorId?: number, data?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

      data.setDate(data.getDate() + 1)
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (doctorId !== undefined && doctorId !== null) {
            queryParameters = queryParameters.set('doctorId', <any>doctorId);
        }
        if (data !== undefined && data !== null) {
            queryParameters = queryParameters.set('data', <any>data.toISOString());
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<BusyTimeSlotsDto>>('get',`${this.basePath}/api/Appointment/busy`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reschedule Appointment
     *
     * @param appointmentId
     * @param patientId
     * @param doctorId
     * @param dataTime
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rescheduleAppointmentForm(appointmentId?: number, patientId?: number, doctorId?: number, dataTime?: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<AppointmentHistoryDTO>>;
    public rescheduleAppointmentForm(appointmentId?: number, patientId?: number, doctorId?: number, dataTime?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AppointmentHistoryDTO>>>;
    public rescheduleAppointmentForm(appointmentId?: number, patientId?: number, doctorId?: number, dataTime?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AppointmentHistoryDTO>>>;
    public rescheduleAppointmentForm(appointmentId?: number, patientId?: number, doctorId?: number, dataTime?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (appointmentId !== undefined) {
            formParams = formParams.append('AppointmentId', <any>appointmentId) as any || formParams;
        }
        if (patientId !== undefined) {
            formParams = formParams.append('PatientId', <any>patientId) as any || formParams;
        }
        if (doctorId !== undefined) {
            formParams = formParams.append('DoctorId', <any>doctorId) as any || formParams;
        }
        if (dataTime !== undefined) {
            formParams = formParams.append('DataTime', <any>dataTime.toLocaleString()) as any || formParams;
        }

        return this.httpClient.request<Array<AppointmentHistoryDTO>>('patch',`${this.basePath}/api/Appointment`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
